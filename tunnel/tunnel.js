// Generated by CoffeeScript 1.4.0
(function() {
  var angleTable, buildTexture, buildTransformTable, ctx, distanceTable, elm, height, imageData, pSet, pixelDensity, texture, textureHeight, textureWidth, tick, width;

  window.requestAnimationFrame || (window.requestAnimationFrame = window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
    return window.setTimeout(function() {
      return callback(+new Date());
    }, 1000 / 60);
  });

  ctx = void 0;

  elm = void 0;

  pixelDensity = void 0;

  textureHeight = 256;

  textureWidth = 256;

  texture = [];

  distanceTable = [];

  angleTable = [];

  width = null;

  height = null;

  imageData = null;

  window.onload = function() {
    var xOffset;
    width = window.innerWidth;
    height = window.innerHeight;
    elm = document.createElement('canvas');
    pixelDensity = window.devicePixelRatio || 1;
    elm.style.width = width + "px";
    elm.style.height = height + "px";
    xOffset = width * pixelDensity / 2;
    elm.setAttribute('width', width * pixelDensity);
    elm.setAttribute('height', height * pixelDensity);
    ctx = elm.getContext('2d');
    imageData = ctx.createImageData(width, height);
    document.body.appendChild(elm);
    buildTexture();
    buildTransformTable();
    return tick();
  };

  pSet = function(imageData, x, y, r, g, b) {
    var index;
    index = (x + y * imageData.width) * 4;
    imageData.data[index + 0] = r;
    imageData.data[index + 1] = g;
    imageData.data[index + 2] = b;
    return imageData.data[index + 3] = 255;
  };

  buildTransformTable = function() {
    var angle, distance, ratio, x, y, _i, _results;
    distanceTable = new Array(width);
    angleTable = new Array(width);
    ratio = 32;
    _results = [];
    for (x = _i = 0; 0 <= width ? _i <= width : _i >= width; x = 0 <= width ? ++_i : --_i) {
      distanceTable[x] = new Array;
      angleTable[x] = new Array;
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (y = _j = 0; 0 <= height ? _j <= height : _j >= height; y = 0 <= height ? ++_j : --_j) {
          distance = ~~(ratio * textureHeight / Math.sqrt((x - width / 2.0) * (x - width / 2.0) + (y - height / 2.0) * (y - height / 2.0)) % textureHeight);
          angle = ~~(0.5 * textureWidth * Math.atan2(y - height / 2.0, x - width / 2.0) / Math.PI);
          distanceTable[x][y] = distance;
          _results1.push(angleTable[x][y] = angle);
        }
        return _results1;
      })());
    }
    return _results;
  };

  buildTexture = function() {
    var i, j, _i, _results;
    texture = new Array(width);
    _results = [];
    for (i = _i = 0; 0 <= width ? _i <= width : _i >= width; i = 0 <= width ? ++_i : --_i) {
      texture[i] = new Array();
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (j = _j = 0; 0 <= height ? _j <= height : _j >= height; j = 0 <= height ? ++_j : --_j) {
          _results1.push(texture[i][j] = (i * 256 / textureWidth) ^ (j * 256 / textureHeight));
        }
        return _results1;
      })());
    }
    return _results;
  };

  tick = function() {
    var animation, color, shiftX, shiftY, x, y, _i, _j;
    animation = (new Date).getTime() / 1000;
    shiftX = ~~(textureWidth * 1.0 * animation);
    shiftY = ~~(textureHeight * 0.25 * animation);
    for (x = _i = 0; 0 <= width ? _i <= width : _i >= width; x = 0 <= width ? ++_i : --_i) {
      for (y = _j = 0; 0 <= height ? _j <= height : _j >= height; y = 0 <= height ? ++_j : --_j) {
        color = texture[~~(distanceTable[x][y] + shiftX) % textureWidth][~~(angleTable[x][y] + shiftY) % textureHeight];
        pSet(imageData, x, y, color, 0, 0);
      }
    }
    ctx.putImageData(imageData, 0, 0);
    return requestAnimationFrame(tick);
  };

}).call(this);
